sudo: false
language: generic

# Speed builds up by caching install requirements
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/usr

matrix:
  include:
    # Default test
    - env: GHCVER=8.0.2 CABALVER=1.24 LUAVER=default COVERAGE=true
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2], sources: [hvr-ghc]}}
    # Test GHC 7.8
    - env: GHCVER=7.8.4 CABALVER=1.18 LUAVER=default
      compiler: ": #GHC 7.8.4"
      addons: {apt: {packages: [cabal-install-1.18,ghc-7.8.4], sources: [hvr-ghc]}}
    # Test GHC 7.10
    - env: GHCVER=7.10.3 CABALVER=1.22 LUAVER=default
      compiler: ": #GHC 7.10.3"
      addons: {apt: {packages: [cabal-install-1.22,ghc-7.10.3], sources: [hvr-ghc]}}
    # Test system Lua 5.1
    - env: GHCVER=8.0.2 CABALVER=1.24 LUAVER=lua-5.1.5
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2], sources: [hvr-ghc]}}
    # Test system Lua 5.2
    - env: GHCVER=8.0.2 CABALVER=1.24 LUAVER=lua-5.2.4
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2], sources: [hvr-ghc]}}
    # Test system Lua 5.3
    - env: GHCVER=8.0.2 CABALVER=1.24 LUAVER=lua-5.3.4
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2], sources: [hvr-ghc]}}
    # Test luajit
    - env: GHCVER=8.0.2 CABALVER=1.24 LUAVER=luajit
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2], sources: [hvr-ghc]}}

  # mark build as successful as soon as all required successes are in.
  fast_finish: true

before_install:
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.cabal/bin:$PATH
  - cabal update

install:
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - echo "$(cabal --version)"
  - cabal install --only-dependencies --enable-tests --disable-optimization

script:
  - CABAL_CONFIG_ARGS=""
  - if [ -n "${COVERAGE}" ]; then CABAL_CONFIG_ARGS="--enable-library-coverage"; fi
  - |
    case "$LUAVER" in
      (lua-5*):
          # Install Lua
          # TODO: test for existing install and skip if one is found
          wget http://www.lua.org/ftp/${LUAVER}.tar.gz
          tar -xf ${LUAVER}.tar.gz
          cd ${LUAVER}
          sed -i 's/^CFLAGS= -O2 -Wall/CFLAGS= -O2 -Wall -fPIC/' src/Makefile
          make linux
          make install INSTALL_TOP=${HOME}/usr
          cd ..

          # Compile and link using system-wide Lua
          CABAL_CONFIG_ARGS="$CABAL_CONFIG_ARGS -fsystem-lua"
          CABAL_CONFIG_ARGS="$CABAL_CONFIG_ARGS --extra-include-dirs=${HOME}/usr/include"
          CABAL_CONFIG_ARGS="$CABAL_CONFIG_ARGS --extra-lib-dirs=${HOME}/usr/lib"
          ;;
      (luajit):
          # Install LuaJIT
          # TODO: test for existing install and skip if one is found
          export LUAJIT_VERSION=2.0.4
          wget http://luajit.org/download/LuaJIT-${LUAJIT_VERSION}.tar.gz
          tar -xf LuaJIT-${LUAJIT_VERSION}.tar.gz
          cd LuaJIT-${LUAJIT_VERSION}
          sed -i 's/^TARGET_CC= $(STATIC_CC)/TARGET_CC= $(DYNAMIC_CC)/g' src/Makefile
          make
          make install PREFIX=${HOME}/usr
          cd ..

          # Compile and link using system-wide LuaJIT
          CABAL_CONFIG_ARGS="$CABAL_CONFIG_ARGS -fluajit"
          CABAL_CONFIG_ARGS="$CABAL_CONFIG_ARGS --extra-include-dirs=${HOME}/usr/include/luajit-2.0"
          CABAL_CONFIG_ARGS="$CABAL_CONFIG_ARGS --extra-lib-dirs=${HOME}/usr/lib"
          ;;
    esac
    case "$LUAVER" in
      (lua-5.1*):
          CABAL_CONFIG_ARGS="$CABAL_CONFIG_ARGS -flua501"
          ;;
      (lua-5.2*):
          CABAL_CONFIG_ARGS="$CABAL_CONFIG_ARGS -flua502"
          ;;
    esac
  - export LD_LIBRARY_PATH=${HOME}/usr/lib:$LD_LIBRARY_PATH
  - echo $CABAL_CONFIG_ARGS
  - cabal configure --enable-tests --disable-optimization --ghc-options="-Werror" $CABAL_CONFIG_ARGS
  - cabal build
  - cabal test
  - cabal copy
  - cabal sdist

after_success:
  - set -e
  - set -x
  - if [ -n "${COVERAGE}" ]; then
      cabal install --disable-optimization hpc-coveralls;
      hpc-coveralls simple-test callbacks haskellfun err_prop test;
    fi
